#!/usr/bin/env python
#
# Copyright (C) 2014  Google Inc.
#
# This file is part of YouCompleteMe.
#
# YouCompleteMe is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# YouCompleteMe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YouCompleteMe.  If not, see <http://www.gnu.org/licenses/>.

import os
import ycm_core
import logging
import subprocess

log = logging.getLogger(__name__)

# https://github.com/Valloric/YouCompleteMe/issues/1478
# echo | clang -stdlib=libc++ -v -E -x c++ - 

LOG_FILENAME = '/tmp/matt.log'


# Set up a specific logger with our desired output level
log = logging.getLogger('MyLogger')
log.setLevel(logging.DEBUG)

# Add the log message handler to the logger
handler = logging.FileHandler(LOG_FILENAME)
log.addHandler(handler)
# log.addHandler()

# that's what we have to fill
system_flags = []


res = subprocess.check_output("sed -n '/#include <...> search starts here/,/End of search list/{//!p}' result.txt", shell=True)
res = res.decode()
system_headers = res.splitlines()

for include in system_headers:
  system_flags.append('-isystem')
  log.info("Appended system %s" % include)
  system_flags.append(include.strip())


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags.
compilation_database_folder = '/home/teto/ns3off/build/'

if os.path.exists( compilation_database_folder ):
  log.info("Loading database")
  database = ycm_core.CompilationDatabase( compilation_database_folder )
  log.info("database should be loaded: %r" % database)
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]



def MatchHeaderToSource( filename ):
  """
  NS3 headers are copied into a specific folder thus stock 
  YCM functions don't fit the bill
  Return the .cc associated with the .h
  """
  log.debug("MatchHeaderToSource: %s" % filename)
  filename = os.path.basename(filename)
  filename = os.path.splitext( filename )[ 0 ]
  filename += ".cc"
  log.debug("Looking for implementation of %s" % filename)
  # be careful it is the python 2.7 version and as such does not return bytes
  match = subprocess.check_output("find src -name %s" % (filename), shell=True)
  match=match.strip()
  #match=match.decode()
  #test = match.decode("ascii")
  #print( "test1=%r", test)
  #print( "test1=%r", match.decode()
  #splitlines()[0].strip()

  #match = "/home/teto/ns3off/src/internet/model/tcp-socket-base.cc"
  log.debug("Encoded match=%r %r" % (match, "toto"))
  match = os.path.abspath(match) 
  log.debug("match=%s" % match)
  return match


# legacy code
    #basename = os.path.splitext( filename )[ 0 ]
    #for extension in SOURCE_EXTENSIONS:
      #replacement_file = basename + extension
      #if os.path.exists( replacement_file ):



def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  log.debug("GetCompilationInfoForFile called with parameter=%s" % filename)
  final_name = filename
  if IsHeaderFile( filename ):
   #match
    final_name = MatchHeaderToSource( filename)
    #compilation_info = database.GetCompilationInfoForFile(
          #replacement_file )
    #if compilation_info.compiler_flags_:
        #return compilation_info
    #return compilation_info
  
  
  log.info("compilation_info for =%s" % final_name)

  return database.GetCompilationInfoForFile( final_name )


# This is the entry point; this function is called by ycmd to produce flags for
# a file.
def FlagsForFile( filename, **kwargs ):
  log.debug("== New request ==\nGetting flags for file %s" % filename)
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      log.warn("Could not find info for this one")
      return None
    
    log.debug(" flags before being made relative %s" % compilation_info.compiler_flags_)
    #log.debug(" flags before being made relative %s" % compilation_info.compiler_flags_)


    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )
    

    final_flags += system_flags;

  else:
    # in case you don't use the clang db
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )
  
  log.debug("Open filename '%s': found flags=%s\n" % (filename, final_flags))
  return {
    'flags': final_flags,
    'do_cache': True
  }

